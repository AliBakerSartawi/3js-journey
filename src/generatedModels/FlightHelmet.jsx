/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { MeshStandardMaterial } from 'three';
import { useFrame } from '@react-three/fiber';

export default function Model(props) {
  const group = useRef();
  const { nodes, materials } = useGLTF('./flightHelmet/FlightHelmet.gltf');

  // instead of applying it manually to each material
  for (const key in materials) {
    const material = materials[key];
    // to not apply it to MeshBasicMaterial
    if (material instanceof MeshStandardMaterial) {
      material.envMap = props.envMap;
      material.envMapIntensity = props.envMapIntensity;
    }
  }

  /**
   * Custom Shader
   */
  useCustomShader(props.allowCustomShader, materials);
  
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        castShadow={props.shadows}
        receiveShadow={props.shadows}
        geometry={nodes.Hose_low.geometry}
        material={materials.HoseMat}
        // material-envMap={props.envMap}
        // material-envMapIntensity={props.envMapIntensity}
      />
      <mesh
        castShadow={props.shadows}
        receiveShadow={props.shadows}
        geometry={nodes.RubberWood_low.geometry}
        material={materials.RubberWoodMat}
        // material-envMap={props.envMap}
        // material-envMapIntensity={props.envMapIntensity}
      />
      <mesh
        castShadow={props.shadows}
        receiveShadow={props.shadows}
        geometry={nodes.GlassPlastic_low.geometry}
        material={materials.GlassPlasticMat}
        // material-envMap={props.envMap}
        // material-envMapIntensity={props.envMapIntensity}
      />
      <mesh
        castShadow={props.shadows}
        receiveShadow={props.shadows}
        geometry={nodes.MetalParts_low.geometry}
        material={materials.MetalPartsMat}
        // material-envMap={props.envMap}
        // material-envMapIntensity={props.envMapIntensity}
      />
      <mesh
        castShadow={props.shadows}
        receiveShadow={props.shadows}
        geometry={nodes.LeatherParts_low.geometry}
        material={materials.LeatherPartsMat}
        // material-envMap={props.envMap}
        // material-envMapIntensity={props.envMapIntensity}
      />
      <mesh
        castShadow={props.shadows}
        receiveShadow={props.shadows}
        geometry={nodes.Lenses_low.geometry}
        material={materials.LensesMat}
        // material-envMap={props.envMap}
        // material-envMapIntensity={props.envMapIntensity}
      />
    </group>
  );
}

useGLTF.preload('./flightHelmet/FlightHelmet.gltf');

function useCustomShader(isAnimated, materials) {
  // useFrame outside if statement, cannot be called conditionally
  const customUniforms = useRef({
    uTime: { value: 0 }
  });

  useFrame(({ clock: { elapsedTime } }) => {
    customUniforms.current.uTime.value = elapsedTime;
  });

  if (isAnimated) {
    // adding custom shaders for funny animations
    for (const material in materials) {
      materials[material].onBeforeCompile = (material) => {
        // adding uniforms manually
        material.uniforms.uTime = customUniforms.current.uTime;

        // to add a function outside of (main) function
        material.vertexShader = material.vertexShader.replace(
          '#include <common>',
          `
            #include <common>

            uniform float uTime;

            mat2 get2dRotateMatrix(float _angle) {
              return mat2(cos(_angle), - sin(_angle),
                          sin(_angle), cos(_angle));
            }
            
          `
        );
        // begin_vertex is responsible for positioning the vertices
        // ... it copies (position) attribute into (transformed) vec3 variable
        material.vertexShader = material.vertexShader.replace(
          '#include <begin_vertex>',
          `
            #include <begin_vertex>
            float angle = position.y + uTime * 2.0;
            mat2 rotateMatrix = get2dRotateMatrix(angle);

            transformed.xz = transformed.xz * rotateMatrix;
          `
        );
      };
    }
  }
}
